Index: decision_tree.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Decision Tree\nfrom __future__ import annotations\nimport csv\nimport random\nfrom typing import Optional, Any\n\nclass Song:\n    \"\"\"An object that represents a specific song and stores its various song attributes.\n\n        Instance Attributes\n        - name:\n            Name of the song.\n        - genre:\n            Genre of the track.\n        - artist:\n            Name of the artist that created the song.\n        - year:\n            Song's year of release.\n        - duration:\n            Duration of the track in milliseconds.\n        - explicit:\n            Boolean that states whether the song contains swear words or not.\n        - popularity:\n            Popularity of the song. The higher the value, the more popular the song is. 0 represents the lowest\n            popularity while 100 represnets the highest popularity.\n        - danceability:\n            Describes how suitable a track is for dancing based on a combination of musical elements including tempo,\n            rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most\n            danceable.\n        - energy:\n            Represents a perceptual measure of intensity and activity. A value of 0.0 represents the lowest energy and\n            1.0 represents the highest energy.\n        - loudness:\n            The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and\n            is the quality of a sound that is the primary psychological correlate of physical strength (amplitude).\n            Values range between -60 and 10 db where -60 db is the quietest and 10 db is the loudest.\n        - speechiness:\n            Detects the presence of spoken words in a track. The more exclusively speech-like the\n            recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66\n            describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe\n            tracks that may contain both music and speech, either in sections or layered, including such cases as rap\n            music. Values below 0.33 most likely represent music and other non-speech-like tracks.\n        - acousticness:\n            A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 0.0 represents low confidence the\n            track is acoustic and 1.0 represents high confidence the track is acoustic.\n        - instrumentalness:\n            Predicts whether a track contains no vocals. \"Ooh\" and \"aah\" sounds are treated as instrumental in this\n            context. Rap or spoken word tracks are clearly \"vocal\". The closer the instrumentalness value is to 1.0,\n            the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent\n            instrumental tracks, but confidence is higher as the value approaches 1.0.\n        - valence:\n            A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence\n            sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative\n            (e.g. sad, depressed, angry).\n        - liveness:\n            Detects the presence of an audience in the recording. Higher liveness values represent an increased\n            probability that the track was performed live. A value above 0.8 provides strong likelihood that the track\n            is live.\n        - tempo:\n            The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the\n            speed or pace of a given piece and derives directly from the average beat duration.\n        - key:\n            The key the track is in. Integers map to pitches using standard Pitch Class notation. E.g. 0 = C, 1 = C♯/D♭,\n            2 = D, and so on. If no key was detected, the value is -1.\n        - mode:\n            Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content\n            is derived. Major is represented by 1 and minor is 0.\n\n        Representation Invariants:\n        - 0.0 <= self.popularity <= 100.0\n        - 0.0 <= self.danceability <= 1.0\n        - 0.0 <= self.energy <= 1.0\n        - -60.0 <= self.loudness <= 10.0\n        - 0.0 <= self.speechiness <= 1.0\n        - 0.0 <= self.acousticness <= 1.0\n        - 0.0 <= self.instrumentalness <= 1.0\n        - 0.0 <= self.valence <= 1.0\n        - 0.0 <= self.liveness <= 1.0\n        - self.tempo >= 0\n        - self.mode == 1 or self.mode == 0\n        \"\"\"\n    name: str\n    genre: str\n    artist: str\n    year: int\n    duration: int\n    explicit: bool\n    popularity: int\n    danceability: float\n    energy: float\n    loudness: float\n    speechiness: float\n    acousticness: float\n    instrumentalness: float\n    valence: float\n    liveness: float\n    tempo: float\n    key: int\n    mode: int\n\n\nclass DecisionTree:\n    \"\"\"A decision tree for organizing our songs.\n\n    Each node in the tree either stores a range of numbers or a set of songs.\n\n    Instance Attributes:\n        - value: the current range of numbers or a set of songs if its is the leaf of the tree.\n\n    Representation Invariants:\n        - all(key == self._subtrees[key].value for key in self._subtrees)\n    \"\"\"\n    value: Optional[set[Song] | list[tuple]]\n\n    # Private Instance Attributes:\n    #  - _subtrees:\n    #      the subtrees of this tree, which represent the decision trees after sorting the song by its attribute value.\n\n    _subtrees: [list[DecisionTree]]\n\n    def __init__(self, value: Optional[set[Song] | list[tuple[float, float]]], subtrees: list) -> None:\n        \"\"\"Initialize a new game tree.\n        \"\"\"\n        self.value = value\n        self._subtrees = subtrees\n\n    def is_empty(self):\n        \"\"\"Return whether the tree is empty or not\"\"\"\n        return self.value is None\n\n    def __str__(self) -> str:\n        \"\"\"Return a string representation of this tree.\n        \"\"\"\n        if self.is_empty():\n            return ''\n        else:\n            # We use newlines ('\\n') to separate the different values.\n            str_so_far = f'{self.value}\\n'\n            for subtree in self._subtrees:\n                str_so_far += subtree.__str__()  # equivalent to str(subtree)\n            return str_so_far\n\n    def _str_indented(self, depth: int = 0) -> str:\n        \"\"\"Return an indented string representation of this tree.\n\n        The indentation level is specified by the <depth> parameter.\n        \"\"\"\n        if self.is_empty():\n            return ''\n        else:\n            str_so_far = '  ' * depth + f'{self.value}\\n'\n            for subtree in self._subtrees:\n                # Note that the 'depth' argument to the recursive call is modified.\n                str_so_far += subtree._str_indented(depth + 1)\n            return str_so_far\n\n    def add_subtree(self, subtree: DecisionTree) -> None:\n        \"\"\"Add a subtree to this game tree.\"\"\"\n        self._subtrees.append(subtree)\n\n    def generate_decision_tree(self) -> None:\n        \"\"\"Add all the tuples and empty song sets into the decision tree.\"\"\"\n        for depth in range(0, 10):\n            if depth == 0:\n                subtree = DecisionTree([(0, 10), (11, 20), (21, 30), (31, 40), (41, 50), (51, 60), (61, 70), (71, 80),\n                                        (81, 90), (91, 100)], [])\n                self._subtrees.append(subtree)\n            elif depth == 3:\n                subtree = DecisionTree([(-60, -50), (-49, -40), (-39, -30), (-29, -20), (-19, -10), (-9, 0), (1, 10)],\n                                       [])\n                self._subtrees.append(subtree)\n            else:\n                subtree = DecisionTree([(0.00, 0.10), (0.11, 0.20), (0.21, 0.30), (0.31, 0.40), (0.41, 0.50),\n                                        (0.51, 0.60), (0.61, 0.70), (0.71, 0.80), (0.81, 0.90), (0.91, 1.00)], [])\n                self._subtrees.append(subtree)\n\n    def insert_song(self) -> None:\n        \"\"\"Insert a song into the decision tree by recursing through the tree until it gets added to a specific song\n        set.\n        \"\"\"\n        # recursive\n\n    def insert_songs(self) -> None:\n        \"\"\"Insert a list of songs into the decision tree so that each song gets sorted into a specific song set.\"\"\"\n        # for loop and call recursive helper\n\n\ndef read_and_write_csv(csv_file: str) -> None:\n    \"\"\"Loads data from a CSV file, and writes a new CSV file called songs_final.csv.\n    songs_final.csv will include only the songs and catergories we plan to use.\n\n    Preconditions:\n       - csv_file refers to a valid CSV file in the format described in the project proposal\n    \"\"\"\n    with open(csv_file) as input_file, open('data/songs_final.csv', 'w', newline='') as output_file:\n        reader = csv.reader(input_file)\n        writer = csv.writer(output_file, delimiter=',')\n        # Writes the Header\n        writer.writerow(['Artist', 'Song', 'Liveness', 'Explicit', 'Year', 'Popularity', 'Danceability',\n                         'Energy', 'Speechiness', 'Loudness'])\n        # Skips the Header\n        next(reader)\n\n        for row in reader:\n            row_to_write = [row[0], row[1], row[14], row[3], row[4], row[5], row[6], row[7], row[11], row[9]]\n            writer.writerow(row_to_write)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/decision_tree.py b/decision_tree.py
--- a/decision_tree.py	(revision 69f265bec65bdc6e6c7b129a6f0bcada45145655)
+++ b/decision_tree.py	(date 1680051524710)
@@ -126,7 +126,7 @@
 
     def is_empty(self):
         """Return whether the tree is empty or not"""
-        return self.value is None
+        return self._subtrees == []
 
     def __str__(self) -> str:
         """Return a string representation of this tree.
@@ -162,9 +162,9 @@
         """Add all the tuples and empty song sets into the decision tree."""
         for depth in range(0, 10):
             if depth == 0:
-                subtree = DecisionTree([(0, 10), (11, 20), (21, 30), (31, 40), (41, 50), (51, 60), (61, 70), (71, 80),
-                                        (81, 90), (91, 100)], [])
-                self._subtrees.append(subtree)
+                self.value = [(0, 10), (11, 20), (21, 30), (31, 40), (41, 50), (51, 60), (61, 70), (71, 80), (81, 90),
+                              (91, 100)]
+                self._subtrees = []
             elif depth == 3:
                 subtree = DecisionTree([(-60, -50), (-49, -40), (-39, -30), (-29, -20), (-19, -10), (-9, 0), (1, 10)],
                                        [])
